from test_helper import check_samples

if __name__ == '__main__':
    check_samples(samples=[["#This is sample code challenge\nimport random\n\ndef generate():\n    num_tests \u003d 10\n    tests \u003d []\n    for test in range(num_tests):\n        a \u003d random.randrange(10)\n        b \u003d random.randrange(10)\n        test_case \u003d \"{} {}\".format(a, b)\n        tests.append(test_case)\n    return tests\n\ndef combinations(n, k):\n    if 0 \u003c\u003d k \u003c\u003d n:\n        ncomb \u003d 1\n        kcomb \u003d 1\n        for i in range(1, min(k, n - k) + 1):\n            ncomb *\u003d n\n            kcomb *\u003d t\n            n -\u003d 1\n        return ncomb // kcomb\n    else:\n        return 0\n\nlst \u003d input().split()\nn \u003d int(lst[0])\nk \u003d int(lst[1])\nprint(combinations(n, k))","5 num_tests\n6 tests\n8 a\n9 b\n10 test_case\n16 ncomb\n17 kcomb\n26 lst\n27 n\n28 k"],["str1 \u003d input()\nlst \u003d []\nnumbers \u003d str1.split(\" \")\nfor i in numbers:\n    lst.append(int(i))\nmean_value \u003d sum(lst)/(len(lst))\nprint(mean_value)","1 str1\n2 lst\n3 numbers\n6 mean_value"],["s \u003d input()\ns \u003d s.lower()\nd \u003d dict()\nl \u003d []\nfor i in s:\n    l.append(i)\n    d[i] \u003d 0\nfor i in l:\n    for key in d:\n        if key \u003d\u003d i:\n            d[i] +\u003d 1\nkeys \u003d d.keys()\nkeys \u003d list(keys)\nkeys.sort()\nfor i in keys:\n    print(i + \u0027 \u0027 + str(d[i]))","1 s\n2 s\n3 d\n4 l\n12 keys\n13 keys"]])